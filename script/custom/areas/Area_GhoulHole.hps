#include "interfaces/Area_Interface.hps"
#include "helpers/helper_player.hps"
#include "helpers/helper_modules.hps"
#include "custom/components/ComponentInterfaces_Custom.hps"
//#include "player/Player_Types.hps"

class cScrAreaGhoulHole : iScrArea, iScrArea_Interface
{
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// INIT
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void Init()
	{
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// LOADING
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void SetupAfterLoad(cWorld @apWorld, cResourceVarsObject @apVars)
	{			
		
		msExitAnim = apVars.GetVarString("Animation", "Low");
		mbNoisyPrick = apVars.GetVarBool("MakeNoise", true);
		
		mBaseObj.Timer_Add("Timer_GhoulHole", cMath_RandRectf(3.0f,5.0f), "OnTimer_GhoulHole");
		
		mBaseObj.SetCheckCollision(false);
		mBaseObj.SetAutoSleep(true);
	}
	
	//------------------------------------------------------------
	
	void OnAfterWorldLoad()
	{
		
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// GENERAL
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	// Last minute hack - let's make every ghoul hole potentially make noises when you get close.
	// IT
	void OnTimer_GhoulHole(uint64 alId)
	{
		MakeNoise();
		mBaseObj.Timer_Add("Timer_GhoulNoise", cMath_RandRectf(3.0f,5.0f), "OnTimer_GhoulHole");
	}
	
	void MakeNoise(){
		if(!mbNoisyPrick) //SHUT THE FUCK UP PLEASE
		{
			if (Player_GetDistanceToEntity(mBaseObj.GetName())<5.0f)
			{	
				tString sSound = "HoleSound_"+mBaseObj.GetName();
				cSoundEntity@ pSound = cLux_GetCurrentMap().GetWorld().GetSoundEntity(sSound);
				if (pSound==null||pSound.IsStopped())
				{
					Sound_CreateAtEntity(sSound, "creatures/foley/creature/ghoul/ghoul_hole/ghoul_wall_sound_sweet", mBaseObj.GetName(), 0.0f, false, 0.5f);
					
					// Offset it into the wall
					@pSound = cLux_GetCurrentMap().GetWorld().GetSoundEntity(sSound);
					cVector3f pos = pSound.GetLocalPosition()+cVector3f_Back;
					pSound.SetPosition(pos);
					Debug_DrawSphere(pSound.GetWorldPosition(), 0.2, cColor_Red * 2, 5);
				}
			}
		}
	}
		
	/*bool OnUpdateAutoSleep()
	{
		return false;
	}*/
	
	//------------------------------------------------------------

	
	//------------------------------------------------------------
	
	void ResetProperties()
	{
	}
	
	//------------------------------------------------------------
	
	void BeforeEntityDestruction()
	{
	}
	
	//------------------------------------------------------------
	
	/* void OnVariableUpdate(float afDeltaTime)
	{	
	}*/
		
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// INTERACTION
	/////////////////////////////////////////
	
	//------------------------------------------------------------
		
//	bool CanInteract(int alType, iPhysicsBody@ apBody)
//	{
//		return false;
//	}

	//-----------------------------------------------------------------------
	
	/////////////////////////////////////////
	// ACTIONS
	/////////////////////////////////////////
	
	//-----------------------------------------------------------------------
	
	void OnSetActive(bool abX)
	{
	}
	
	//-----------------------------------------------------------------------
	
	
	void OnConnectionStateChange(iLuxEntity@ apEntity,int alState)
	{
	}
	
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// COLLISIONS
	/////////////////////////////////////////
	
	//-----------------------------------------------------------------------

//	bool OnStartCheckCollision(float afTimeStep, float afTimeSinceCheck)
//	{
//		return true;
//	}
	
	//-----------------------------------------------------------------------

//	bool OnCheckCollision(iPhysicsBody@ apBody, iLuxEntity@ apEntity)
//	{
//		return true;
//	}
	
	//-----------------------------------------------------------------------

//	void OnEndCheckCollision(float afTimeStep)
//	{
//	}
	
	//-----------------------------------------------------------------------
	
	/////////////////////////////////////////
	// GLOBAL
	/////////////////////////////////////////
	
	//-----------------------------------------------------------------------
	
	void _Global_GetExitAnimType()
	{
		cScript_SetGlobalReturnString(msExitAnim);
	}
	
	//-----------------------------------------------------------------------
	
	/////////////////////////////////////////
	// DEBUG
	/////////////////////////////////////////
	
	//------------------------------------------------------------
		
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afStartY)
	{
			
		return afStartY;
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// PROPERTIES
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	tString msExitAnim = "";
	bool mbNoisyPrick = true;
	
	//------------------------------------------------------------
		
}	