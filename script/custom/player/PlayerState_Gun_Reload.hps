#include "interfaces/PlayerState_Interface.hps"
#include "base/InputHandler_Types.hps"
#include "player/Player_Types.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_player.hps"
#include "helpers/helper_player_custom.hps"
#include "utilities/Utility_PickBasics.hps"

//------------------------------------------------------------

class cScrPlayerState_UsingRadio : iScrPlayerState, iScrPlayerState_Interface
{
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// GLOBAL
	/////////////////////////////////////////

	//------------------------------------------------------------

	void OnAttachBodyToStickyArea() {}
	
	//------------------------------------------------------------
		
	/////////////////////////////////////////
	// INIT
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void Init()
	{
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// USER SETTINGS
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void LoadUserConfig() {}
	void SaveUserConfig() {}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// ENTER MAP
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void OnMapEnter(cLuxMap @apMap) {}
	void OnMapLeave(cLuxMap @apMap) {}
	
	//------------------------------------------------------------
	
	void CreateWorldEntities(cLuxMap @apMap) {}
	void DestroyWorldEntities(cLuxMap @apMap) {}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// GENERAL
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void OnEnterState(int alPrevStateId)
	{		
		PlayerBody_SetArmAnimationPitchLimits(-60.f, 5.f);
		
		Player_SetCrouching(false, false, false);
		
		cScript_SetGlobalArgBool(0, false);
		cScript_RunGlobalFunc("LuxPlayer", "", "_Global_SetCanRun");
	}
	
	//------------------------------------------------------------
	
	void OnLeaveState(int alNextStateId)
	{		
		PlayerBody_ResetArmAnimationPitchLimits();
		
		cScript_SetGlobalArgBool(0, true);
		cScript_RunGlobalFunc("LuxPlayer", "", "_Global_SetCanRun");
	}
	
	//------------------------------------------------------------
	
	void Reset()
	{
		mPickBasics.Reset();
	}
	
	//------------------------------------------------------------
	
	void Update(float afTimeStep)
	{
		cCamera @pCam = mBaseObj.mpPlayer.GetCamera();
		
		if( pCam!=null && mPickBasics.UpdatePickCheck(pCam, true) )
		{
			int lState = mPickBasics.GetFocusedEntity().GetInteractIconId(0, mPickBasics.GetFocusedBody());
			if(lState >=0 )
				Player_SetCrossHairState(eCrossHairState(lState));
			else
				Player_SetCrossHairState(eCrossHairState_Default);
		}
	}
	
	//------------------------------------------------------------
	
	void PostUpdate(float afTimeStep)
	{
		
	}
	
	//------------------------------------------------------------

	void OnGui(float afTimeStep)
	{
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// ACTIONS
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	bool OnAction(int alAction, bool abPressed)
	{
		return false;
	}
	
	//------------------------------------------------------------
	
	bool OnAnalogInput(int alAnalogId, const cVector3f &in avAmount)
	{
		return true;
	}
	
	//------------------------------------------------------------
	
	bool OnExitPressed()
	{
		return true;
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// BODY CALLBACKS
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	bool AllowBuoyancy(iPhysicsBody @apBody) { return true; }

	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// CHARACTER CALLBACK
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	void CharBody_GravityCollide(iCharacterBody@ apCharBody, iPhysicsBody@ apBody, cCollideData @apCollideData) {}	
	void CharBody_HitGround(iCharacterBody@ apCharBody,const cVector3f &in avVel) {}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// DEBUG
	/////////////////////////////////////////
	
	//------------------------------------------------------------
		
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afStartY)
	{
		tString sBodyName = "Null";
		if(mPickBasics.GetFocusedBody() !is null) sBodyName = mPickBasics.GetFocusedBody().GetName();
		
		apSet.DrawFont(tWString("Focus Body:"+sBodyName), apFont, cVector3f(5,afStartY,0), cVector2f(14), cColor(1,1) );
		afStartY += 14;
						
		return afStartY;
	}
	
	//------------------------------------------------------------
	
	/////////////////////////////////////////
	// PROPERTIES
	/////////////////////////////////////////
	
	//------------------------------------------------------------
	
	cUtility_PickBasics mPickBasics;
	
	//------------------------------------------------------------
}