#include "custom/modules/ModuleInterfaces_Custom.hps"
#include "custom/player/PlayerTypes_Custom.hps"
#include "helpers/helper_audio.hps"

//-------------------------------------------------------

/////////////////////////////////////////
// ITEM HANDLER
/////////////////////////////////////////

//-------------------------------------------------------

/**
* @param asType, Item type
* @param abDrawGuiAnimation, if the gui animation shoul play
* @return The new item's ID
*/

tString Item_AddToInventory(const tString& in asType, bool abDrawGuiAnimation = false)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.AddToInventory(asType, abDrawGuiAnimation);
}

//-------------------------------------------------------

void Item_ClearInventory()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.ClearInventory();
}

//-------------------------------------------------------

/**
* @param asType, Item type
* @param alCount, How many? Should be >1
*/
void Item_AddManyToInventory(const tString& in asType, int alCount)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.AddManyToInventory(asType,alCount);
}

//-------------------------------------------------------

/**
* If it's a stack, simply removes one from the stack!
* @param asItemID The item's ID
*/
void Item_RemoveFromInventory(const tString& in asItemID)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.RemoveFromInventory(asItemID);
}

//-------------------------------------------------------

/**
 * Pick up an item in the world and put the item type it represents into the player's inventory.
 * Item type should be set using Item_SetEntityItemType() (like Prop_Pickup does)
 * @param asEntityName Entity to pick up
 * @param abMakeHeld Put it into your hands - only works if the item is spawnable
 * @param abThenPutAway Put it away when done
 * @return the inventory ID of the new item
 */
tString Item_PickUpEntity(const tString& in asEntityName,  bool abMakeHeld=false, bool abThenPutAway=true)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.PickUpEntity(asEntityName, abMakeHeld, abThenPutAway);
}

//-------------------------------------------------------

bool Item_IsPickingUp()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.IsPickingUpItem();
}

//-------------------------------------------------------

//TODO: Check if this is needed
/** If this item exists in the player's inventory and it is droppable,
 * spawns an entity in the level to represent the item and removes it from the inventory.
 * The entity file comes from ItemTypes.cfg 
 * @param asEntityID Item ID
 * @return name of the new entity, or "" if it failed.
 */
tString Item_SpawnAsEntity(const tString& in asItemID, const cMatrixf& in aTransform = cMatrixf_Identity)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.SpawnAsEntity(asItemID, aTransform);
}

//-------------------------------------------------------

/** Called when using one item on another in the inventory.
 * @param asItemAID First item
 * @param asItemBID Second item
 * @return True if the combo changes the inventory list in any way
 */
bool Item_Combine(const tString& in asItemAID, const tString& in asItemBID)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.Combine(asItemAID, asItemBID);
}

//-------------------------------------------------------

/** 
 * Use hand to take out item from inventory
 * @param abThenPutAway Put it away as soon as it's finished coming out.
 */
void Item_TakeOut(const tString& in asItemID, bool abThenPutAway = false)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.TakeOut(asItemID, abThenPutAway);
}

//-------------------------------------------------------

/** 
 * Equip item - might mean take out into right or left hand
 */
void Item_Equip(const tString& in asItemID)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.Equip(asItemID);
}

//-------------------------------------------------------

/** 
 * Put a currently held item away.
 */
void Item_Unequip(const tString& in asItemID, bool abInstant=false)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.Unequip(asItemID,abInstant);
}

//-------------------------------------------------------

/** 
 * Put a currently held item away.
 */
void Item_PutAway(eItemHandlerHand aHand = eItemHandlerHand_Right)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.PutAway(aHand);
}

//-------------------------------------------------------

/** Checks if the player is holding an item.
 * @param aHand Hand holding the item
 * @return True if any item is held on a specific hand.
 */
bool Item_IsHeld(eItemHandlerHand aHand = eItemHandlerHand_Right)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.IsItemHeld(aHand);
}

//-------------------------------------------------------

tString Item_GetHeld(eItemHandlerHand aHand = eItemHandlerHand_Right)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.GetHeldItem(aHand);
}

//-------------------------------------------------------

/** Returns the entity name of the specified item
 * @param asItemID, id of the item
 */
tString Item_GetItemEntity(const tString &in asItemID)
{
	iScrItemHandler_Interface@ pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	
	iScrItem@ pItem = pHandler.GetByID(asItemID);
	if (pItem is null)
	{
		Error("No item with ID " + asItemID + "found for 'Item_GetItemEntity()'");
		return "";
	}
	
	eItemHandlerHand hand = pItem.GetType().GetEquipHand();	
	tString sEntity = pItem.GetInternalEntity();
	
	if (pHandler.GetHeldItem(hand) == asItemID)			sEntity = pHandler.GetHeldEntity(hand);
	else if (pItem.GetType().IsAccessory())				sEntity = pHandler.GetAccessoryEntityByID(asItemID);
	
	return sEntity;	
}

//-------------------------------------------------------

/** Checks which item is the player holding.
 * @param aHand Hand holding the item
 * @return the name of the held item.
 */
tString Item_GetHeldType(eItemHandlerHand aHand = eItemHandlerHand_Right)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sItem = pHandler.GetHeldItem(aHand);
	if (sItem=="")
		return "";
	iScrItem@ pItem=pHandler.GetByID(sItem);
	return pItem.GetTypeID();
}

//-------------------------------------------------------

/** Gets whether the item the player is holding is meant to use arm animations.
 * @param aHand Hand holding the item
 * @return true if the item is meant to use arm animations.
 */
bool Item_GetUsesArmAnimation(eItemHandlerHand aHand = eItemHandlerHand_Right)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = pHandler.GetByID(pHandler.GetHeldItem(aHand));
	return pItem.GetType().GetUsesArmAnimation();
}

//-------------------------------------------------------

/** Gets state of held item
 * @param aHand Hand holding the item
 * @return the state of the held item.
 */
int Item_GetHeldState(eItemHandlerHand aHand = eItemHandlerHand_Right)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sItem = pHandler.GetHeldItem(aHand);
	if (sItem=="")
		return -1;
	
	return pHandler.GetHeldItemState(aHand);
}

//-------------------------------------------------------

tString Item_GetHeldEntity(eItemHandlerHand aHand = eItemHandlerHand_Right)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.GetHeldEntity(aHand);
}

//-------------------------------------------------------

bool Item_GetCanUseOnWorld(eItemHandlerHand aHand, const tString& in asEntity)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.CanUseHeldItemOnWorld(aHand, asEntity);
}

//-------------------------------------------------------

bool Item_GetCanUseOnSelf(eItemHandlerHand aHand = eItemHandlerHand_Right)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.CanUseHeldItemOnSelf(aHand);
}

//-------------------------------------------------------

bool Item_GetCanPutAwayHeldItem(eItemHandlerHand aHand = eItemHandlerHand_Right)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.CanPutAwayHeldItem(aHand);
}

//-------------------------------------------------------

bool Item_UseHeldAsTool(eItemHandlerHand aHand, int context, bool pressed)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.UseHeldItemAsTool(aHand, context, pressed);
}

//-------------------------------------------------------

void Item_UseHeldOnWorld(eItemHandlerHand aHand, const tString& in asEntity)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.UseHeldItemOnWorld(aHand, asEntity);
}

//-------------------------------------------------------

void Item_UseHeldOnSelf(eItemHandlerHand aHand)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.UseHeldItemOnSelf(aHand);
}

//-------------------------------------------------------

void Item_StopUsing(eItemHandlerHand aHand = eItemHandlerHand_Right)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.StopUsingItem(aHand);
}

//-------------------------------------------------------

void Item_SetDisableUseOnSelf(const tString &in asItem, bool abX)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = pHandler.GetByID(asItem);
	if (pItem is null)
	{
		Error("Found no item by the name " + asItem + " to call SetDisableUseOnSelf(bool abX) on.");
		return;
	}
	pItem.SetDisableUseOnSelf(abX);
}

//-------------------------------------------------------
/** Instantly put away the item in your hand. */

void Item_KillHeldItem(eItemHandlerHand aHand)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.KillHeldItem(aHand);
}

//-------------------------------------------------------

void Item_TakeOutLast(eItemHandlerHand aHand)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sLast = pHandler.GetLastHeldItem(aHand);
	if (pHandler.GetByID(sLast) is null)
		return;
	pHandler.TakeOut(sLast, false);
}

//-------------------------------------------------------

void Item_SetUseAltInventoryIcon(const tString &in asItemID, bool abX, bool abWhenSketchbookClosed = true)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem=pHandler.GetByID(asItemID);
	pItem.SetUseAltInventoryIcon(abX, abWhenSketchbookClosed);
}

//-------------------------------------------------------

tString Item_GetActiveInventoryIcon(eItemHandlerHand aHand = eItemHandlerHand_Right)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = pHandler.GetByID(pHandler.GetHeldItem(aHand));
	return pItem.GetActiveInventoryIcon();
}

//-------------------------------------------------------

void Item_SetHidden(const tString &in asItemID, bool abX)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = pHandler.GetByID(asItemID);
	if (pItem !is null)
		pItem.SetHidden(abX);
}

//-------------------------------------------------------

bool Item_GetHidden(const tString &in asItemID)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = pHandler.GetByID(asItemID);
	return pItem !is null ? pItem.GetHidden() : false;
}

//-------------------------------------------------------

void Item_ToggleHeldItem(const tString&in asItem, eItemHandlerHand aHand = eItemHandlerHand_Right)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.ToggleHeldItem(asItem, aHand);
}

//-------------------------------------------------------

void Item_ToggleMatch()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.ToggleMatch();
}

//-------------------------------------------------------

void Item_ShowMatchCount(bool abEmpty, bool abRemainOnScreen = true)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.ShowMatchCount(abEmpty, abRemainOnScreen);
}

//-------------------------------------------------------

void Item_ShowShadowFleshVialCount(bool abEmpty, bool abRemainOnScreen = true)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.ShowShadowFleshVialCount(abEmpty, abRemainOnScreen);
}

//-------------------------------------------------------

void Item_FlashItemCount(int alFlashCount = 1)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.FlashItemCount(alFlashCount);
}

void Item_GiveAll()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.GiveAllItems();
}

//-------------------------------------------------------

//-------------------------------------------------------
// Item Type
//-------------------------------------------------------

/**
* Removes items of a particular type
* @param asType, Item type
* @param alCount, number of items of that type to remove. If -1, removes all
*/
void ItemType_RemoveFromInventory(const tString& in asType, int alCount=-1)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.RemoveTypeFromInventory(asType,alCount);
}

//-------------------------------------------------------

/**
* @param asType The item type
* @return true if one or more of these items is in the inventory
*/
bool ItemType_IsInInventory(const tString& in asType)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.IsTypeInInventory(asType);
}

//-------------------------------------------------------

/**
* @param asType The item type
* @return the number of items of this type in the inventory
*/
int ItemType_GetCountInInventory(const tString& in asType)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.GetTypeCountInInventory(asType);
}

//-------------------------------------------------------
//TODO: Rename to Item_GetContentType
int ContentType_GetCountInInventory(const tString& in asType)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.GetContentTypeCountInInventory(asType);
}


//-------------------------------------------------------

/**
 * Get the ID of the first item of this type in the inventory
* @param asType The item type
* @return the ID, or "" if no ID.
*/
tString ItemType_GetFirstInInventory(const tString& in asType)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.GetFirstOfTypeInInventory(asType);
}

//-------------------------------------------------------

/** If this item type is droppable,
 * spawns an entity in the level to represent the item at
 * the given location.
 * The entity file comes from ItemTypes.cfg 
 * @param asType Item type
 * @param aTransform Position to spawn it at
 * @return name of the new entity, or "" if it failed.
 */
tString ItemType_SpawnAsEntity(const tString& in asType, cMatrixf aTransform)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.SpawnTypeAsEntity(asType, aTransform);
}

//-------------------------------------------------------

/** If this item will fit into the inventory
 * @param asType Item type
 * @return True if there's enough space in the inventory.
 */
bool ItemType_WillFit(const tString& in asType)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.WillItemTypeFit(asType);
}

//-------------------------------------------------------
// Containers
//-------------------------------------------------------

bool Item_IsContainer(const tString& in asItem)
{
	if(asItem == "")
		return false;
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = pHandler.GetByID(asItem);
	if (pItem is null)
	{
		Error("Can't find item:"+asItem+" for Item_IsContainer");
		return false;
	}
	return pItem.IsContainer();
}

//-------------------------------------------------------
//TODO: Rename to Item_GetContentType
tString Item_GetContentSubType(const tString& in asItem)
{
	if(asItem == "")
		return "";
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = pHandler.GetByID(asItem);
	if (pItem is null)
	{
		Error("Can't find item:"+asItem+" for Item_GetContentSubType");
		return "";
	}
	return pItem.GetContentType();
}

//-------------------------------------------------------

int Item_GetAmount(const tString& in asItem)
{
	if(asItem == "")
		return 0;
	int lUnits = 0;
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = pHandler.GetByID(asItem);
	if (pItem is null)
	{
		Error("Can't find item:"+asItem+" for Item_GetAmount");
		return 0;
	}
	return pItem.GetAmount();
}

//-------------------------------------------------------
//TODO: Remove once all links are replaced with Item_GetAmount.
int Item_GetContentLevel(const tString& in asItem)
{
	return Item_GetAmount(asItem);
}

//-------------------------------------------------------

void Item_DecreaseAmount(const tString& in asItem, int alAmount)
{
	if(asItem == "")
		return;
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = pHandler.GetByID(asItem);
	if (pItem is null)
	{
		Error("Can't find item:"+asItem+" for Item_DecreaseAmount");
		return;
	}

	int lCount = pItem.GetAmount();
	pItem.SetAmount(lCount-alAmount);
}

//-------------------------------------------------------

void Item_IncreaseAmount(const tString& in asItem, int alAmount)
{
	if(asItem == "")
		return;
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = pHandler.GetByID(asItem);
	if (pItem is null)
	{
		Error("Can't find item:"+asItem+" for Item_IncreaseAmount");
		return;
	}

	int lCount = pItem.GetAmount();
	pItem.SetAmount(lCount+alAmount);
}

//-------------------------------------------------------

float Item_GetFullness(const tString& in asItem)
{
	if(asItem == "")
		return 0;
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = pHandler.GetByID(asItem);
	if (pItem is null)
	{
		Error("Can't find item:"+asItem+" for Item_GetFullness");
		return 0;
	}
	return pItem.GetFullness();
}

//-------------------------------------------------------
//TODO: Can be replaced by Item_SetAmount.
void Item_SetContent(const tString& in asItem, const tString&in asContentType, int alAmount)
{
	if(asItem == "")
		return;
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = pHandler.GetByID(asItem);
	if (pItem is null)
	{
		Error("Can't find item:"+asItem+" for Item_SetContent");
		return;
	}

	pItem.SetContentType(asContentType);
	pItem.SetAmount(alAmount);
}

//-------------------------------------------------------

void Item_SetAmount(const tString& in asItemID, int alAmount)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	for (uint i=0;i<pHandler.GetItemCount();++i)
	{
		iScrItem@ pItem = pHandler.GetItem(i);
		if (pItem.GetType().GetID()!=asItemID)
			continue;
		pItem.SetAmount(alAmount);
	}
}

//-------------------------------------------------------
//TODO: Remove if not needed
bool Item_CanAddSubType(const tString& in asItem, const tString& in asType, const tString& in asSubType)
{
	if(asItem == "")
		return false;
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = pHandler.GetByID(asItem);
	if (pItem is null)
	{
		Error("Can't find item:"+asItem+" for Item_CanAddSubType");
		return false;
	}
	return pItem.CanAddSubType(asType, asSubType);
}

//-------------------------------------------------------

int Item_GetAmountMax(const tString& in asItem)
{
	if(asItem == "")
		return 0;
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = pHandler.GetByID(asItem);
	if (pItem is null)
	{
		Error("Can't find item:"+asItem+" for Item_GetAmountMax");
		return 0;
	}
	return pItem.GetType().GetAmountMax();
}

//-------------------------------------------------------
// Entities
//-------------------------------------------------------

void Item_SetEntityItemType(const tString& in asEntity, const tString& in asTypeID)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.SetEntityItemType(asEntity, asTypeID);
}

//-------------------------------------------------------

tString Item_GetEntityItemType(const tString& in asEntity)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	return pHandler.GetEntityItemType(asEntity);	
}

//-------------------------------------------------------

void Item_CopyItemDataToEntity(const tString& in asItemID, const tString& in asEntity)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = pHandler.GetByID(asItemID);
	if (pItem is null)
		return;
	pHandler.CopyItemDataToEntity(pItem, asEntity);	
}

//-------------------------------------------------------

void Item_CopyEntityToItemData(const tString& in asEntity, const tString& in asItemID)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = pHandler.GetByID(asItemID);
	if (pItem is null)
		return;
	pHandler.CopyEntityToItemData(asEntity, pItem);	
}

//-------------------------------------------------------

void Item_SetEntityContent(const tString& in asEntity, const tString& in asSubType, int alLevel)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	pHandler.SetEntityContent(asEntity, asSubType, alLevel);	
}

//-------------------------------------------------------

tString Item_GetAnimationName(const tString& in asEntity)
{
	cScript_RunGlobalFunc(asEntity, "cScrPropPickup", "_Global_GetAnimationName");
	return cScript_GetGlobalReturnString();
}

//-------------------------------------------------------

tString Item_GetAnimationNameSpecific(const tString& in asEntity, const tString& in asType)
{
	cScript_SetGlobalArgString(0, asEntity);
	cScript_SetGlobalArgString(1, asType);
	cScript_RunGlobalFunc(asEntity, "cScrPropPickup", "_Global_GetAnimationNameSpecific");
	return cScript_GetGlobalReturnString();
}

//-------------------------------------------------------
// Using
//-----------------------------------------------------

void Item_ReportUseProgress(float afProgress)
{
	cScript_SetGlobalArgFloat(0,afProgress);
	cScript_RunGlobalFunc("State_UsingItem","","_Global_ReportProgress");
}

//-------------------------------------------------------

float Item_GetUseProgress()
{
	cScript_RunGlobalFunc("State_UsingItem","","_Global_GetProgress");
	return cScript_GetGlobalReturnFloat();
}

//-------------------------------------------------------

void Item_ReduceContentCount(const tString &in asContentType, int alAmount)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	for (uint i=0; i<pHandler.GetItemCount(); ++i)
	{
		iScrItem@ pItem = pHandler.GetItem(i);
		if (pItem.GetType().GetContainerContentType()!=asContentType) continue;
		if (pItem.GetType().GetID()=="Lantern") continue;
		
		int lAmount = pItem.GetAmount();
		if (lAmount<=0) continue;
		if (lAmount >= alAmount)
		{
			pItem.SetAmount(lAmount - alAmount);
			return;
		}
		else
		{
			pItem.SetAmount(0);
			alAmount -= lAmount;
		}
	}
}

//-------------------------------------------------------

//-------------------------------------------------------
// LightSource
//-------------------------------------------------------

bool Item_IsLightSourceActive()
{
	/*iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	iScrItem@ pItem = null;
	tString sEntity;
	iLuxEntity@ pEntity = null;
	
	for (int i = 0; i < int(eItemHandlerHand_LastEnum); i++)
	{
		tString sItem = pHandler.GetHeldItem(eItemHandlerHand(i));
		if (sItem == "") continue;
		
		@pItem = pHandler.GetByID(sItem);
		if (pItem is null || pItem.GetType().IsLightSource()==false) continue;
		
		sEntity = pHandler.GetHeldEntity(eItemHandlerHand(i));
		@pEntity = cLux_GetCurrentMap().GetEntityByName(sEntity);
		if (pEntity !is null && pEntity.GetEffectsActive())
			return true;
	}*/
	
	cScript_RunGlobalFunc("LuxPlayer", "", "_Global_GetLanternOn");
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------------

//-------------------------------------------------------
// Matches
//-------------------------------------------------------

int Matches_GetCount()
{
	int lUnits = 0;
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	for (uint i=0;i<pHandler.GetItemCount();++i)
	{
		iScrItem@ pItem = pHandler.GetItem(i);
		if (pItem.GetType().GetID()!="Matchbook")
			continue;
		lUnits+=pItem.GetAmount();
	}
	
	return lUnits;
}

//------------------------------------------------------- 

eItemHandlerHand Match_GetHand()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sMatchItem = pHandler.GetFirstOfTypeInInventory("Match");
	if (sMatchItem == "")
	{
		return eItemHandlerHand_Left;
	}	
	iScrItem@ pItem = pHandler.GetByID(sMatchItem);
	
	tString sMatchEntity = Item_GetHeld(pItem.GetType().GetEquipHand()) == sMatchItem ? Item_GetHeldEntity(pItem.GetType().GetEquipHand()) : pItem.GetInternalEntity();		
	cScript_RunGlobalFunc(sMatchEntity, "cScrPropMatch", "_Global_GetHand");
	
	eItemHandlerHand lHand = (cScript_GetGlobalReturnInt() == 0) ? eItemHandlerHand_Left : eItemHandlerHand_Right;
	return lHand;
}

//------------------------------------------------------- 

/**
 * Consumes match time.
 **/
void Match_IncreaseBurnTime()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sMatchItem = pHandler.GetFirstOfTypeInInventory("Match");
	if (sMatchItem == "")
	{
		Error("No match was found in player inventory!");
		return;
	}	
	iScrItem@ pItem = pHandler.GetByID(sMatchItem);
	
	tString sMatchEntity = Item_GetHeld(pItem.GetType().GetEquipHand()) == sMatchItem ? Item_GetHeldEntity(pItem.GetType().GetEquipHand()) : pItem.GetInternalEntity();		
	cScript_RunGlobalFunc(sMatchEntity, "cScrPropMatch", "_Global_IncreaseBurnTime");
}

//-------------------------------------------------------

/**
 * Gets the state of the specified move object.
 * 
 * @param asEntity, name of the move object prop.
 **/
bool Match_IsBurnt()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sMatchItem = pHandler.GetFirstOfTypeInInventory("Match");
	if (sMatchItem == "")
	{
		Error("No match was found in player inventory!");
		return false;
	}	
	iScrItem@ pItem = pHandler.GetByID(sMatchItem);
	
	tString sMatchEntity = Item_GetHeld(pItem.GetType().GetEquipHand()) == sMatchItem ? Item_GetHeldEntity(pItem.GetType().GetEquipHand()) : pItem.GetInternalEntity();		
	cScript_RunGlobalFunc(sMatchEntity, "cScrPropMatch", "_Global_IsBurnt");
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------------

/**
 * Is the player holding a burning match?
 **/
bool Match_IsHeldAndBurning()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sMatchItem = pHandler.GetFirstOfTypeInInventory("Match");
	if (sMatchItem == "")
	{
		Error("No match was found in player inventory!");
		return false;
	}	
	iScrItem@ pItem = pHandler.GetByID(sMatchItem);
	bool bMatchIsHeld = Item_GetHeld(pItem.GetType().GetEquipHand()) == sMatchItem;
	if (!bMatchIsHeld)
		return false;
	
	tString sMatchEntity = Item_GetHeldEntity(pItem.GetType().GetEquipHand());
	cScript_RunGlobalFunc(sMatchEntity, "cScrPropMatch", "_Global_IsBurnt");
	return !cScript_GetGlobalReturnBool();
}

//-------------------------------------------------------

//-------------------------------------------------------
// Oil
//-------------------------------------------------------

/**
 * @param asOilType, type of oil to calcule (HerbertOil, ModernOil or AlchemistOil). "" = any type.
 * @return The amount of oil in the inventory _not_ in lanterns.
 **/
int Oil_GetCount(const tString &in asOilType = "")
{
	int nOilUnits=0;
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	for (uint i=0;i<pHandler.GetItemCount();++i)
	{
		iScrItem@ pItem = pHandler.GetItem(i);
		if (pItem.GetType().GetContainerContentType()!="Oil")
			continue;
		if (pItem.GetType().GetID()=="Lantern")
			continue;
		if (asOilType != "" && pItem.GetType().GetID()!=asOilType)
			continue;
		
		nOilUnits+=pItem.GetAmount();
	}
	
	return nOilUnits;
}

//-------------------------------------------------------

void Oil_ReduceCount(int alAmount)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	for (uint i=0;i<pHandler.GetItemCount();++i)
	{
		iScrItem@ pItem = pHandler.GetItem(i);
		if (pItem.GetType().GetContainerContentType()!="Oil") continue;
		if (pItem.GetType().GetID()=="Lantern") continue;
		
		int lAmount = pItem.GetAmount();
		if (lAmount<=0) continue;
		if (lAmount>=alAmount)
		{
			pItem.SetAmount(lAmount - alAmount);
			return;
		}
		else
		{
			pItem.SetAmount(0);
			alAmount -= lAmount;
		}
	}
}

//-------------------------------------------------------

bool Oil_UseForLamp()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	for (uint i=0;i<pHandler.GetItemCount();++i)
	{
		iScrItem@ pItem = pHandler.GetItem(i);
		if (pItem.GetType().GetContainerContentType()!="Oil")
			continue;
		if (pItem.GetType().GetID()=="Lantern")
			continue;
		int nContentLevel=pItem.GetAmount();
		if (nContentLevel==0)
			continue;
		pItem.SetAmount(nContentLevel-1);
		return true;
	}
	return false;
}

//-------------------------------------------------------

void Oil_TakeOutItem()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	for (uint i=0;i<pHandler.GetItemCount();++i)
	{
		iScrItem@ pItem = pHandler.GetItem(i);
		if (pItem.GetType().GetContainerContentType()!="Oil")
			continue;
		if (pItem.GetType().GetID()=="Lantern")
			continue;
		int nContentLevel=pItem.GetAmount();
		if (nContentLevel==0)
			continue;
		Item_Equip(pItem.GetID());
		return;
	}
	return;
}

//-------------------------------------------------------

//-------------------------------------------------------
// Amulet
//-------------------------------------------------------

//-------------------------------------------------------

/** 
 * Returns the current tracking target.
 */
tID Amulet_GetTrackTarget()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sItem = pHandler.GetFirstOfTypeInInventory("CurseMedallion");
	if (sItem == "")
	{
		Error("No amulet was found in player inventory!");
		return tID_Invalid;
	}
		
	cScript_RunGlobalFunc(Item_GetItemEntity(sItem), "cScrPropCurseMedallion", "_Global_GetTrackTarget");
	return cScript_GetGlobalReturnID();
}

//-------------------------------------------------------

/** 
 * Activates amulate tracking.
 * @param abEffects, If the amulet should notify the player that it's now tracking
 * @param asTarget, Specific target for the amulet to track. If "", automatic tracking of nearby rifts will be used.
 * @param afTrackingDistance, The distance at which the amulet will track the target. If -1.f the tracking distance value on the rift will be used.
 */
void Amulet_StartTracking(bool abEffects, const tString &in asTarget = "", float afTrackingDistance = -1.f)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sItem = pHandler.GetFirstOfTypeInInventory("CurseMedallion");
	
	if (sItem == "")
	{
		Error("No amulet was found in player inventory!");
		return;
	}
	
	iLuxEntity@ pEnt = cLux_GetCurrentMap().GetEntityByName(asTarget);
	if (asTarget != "" && pEnt is null)
	{
		Error("No entity with name '" + asTarget + "' was found for Amulet_StartTracking()");
		return;
	}
	
	iScrItem@ pItem = pHandler.GetByID(sItem);
	pItem.SetUseAltInventoryIcon(true);
	
	cScript_SetGlobalArgBool(0, abEffects);
	cScript_SetGlobalArgID(1, pEnt is null ? tID_Invalid : pEnt.GetID());
	cScript_SetGlobalArgFloat(2, afTrackingDistance);
	cScript_RunGlobalFunc(Item_GetItemEntity(sItem), "cScrPropCurseMedallion", "_Global_StartTracking");
}

//-------------------------------------------------------

/** 
 * Stops all tracking.
 */
void Amulet_StopTracking()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sItem = pHandler.GetFirstOfTypeInInventory("CurseMedallion");
	
	if (sItem == "")
	{
		Error("No amulet was found in player inventory!");
		return;
	}
	
	iScrItem@ pItem = pHandler.GetByID(sItem);
	pItem.SetUseAltInventoryIcon(false);
	
	cScript_RunGlobalFunc(Item_GetItemEntity(sItem), "cScrPropCurseMedallion", "_Global_StopTracking");
}

//-------------------------------------------------------

/** 
 * Returns true if the amulet is currently being held.
 */
bool Amulet_IsHeld()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sItem = pHandler.GetFirstOfTypeInInventory("CurseMedallion");
	
	if (sItem == "")
	{
		Error("No amulet was found in player inventory!");
		return false;
	}
	
	return Item_GetHeld() == sItem;
}

//-------------------------------------------------------

/** 
 * Returns true if the amulet is being put away
 */
bool Amulet_IsBeingPutAway()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sItem = pHandler.GetFirstOfTypeInInventory("CurseMedallion");
	
	if (sItem == "")
	{
		Error("No amulet was found in player inventory!");
		return false;
	}
	
	cScript_RunGlobalFunc(Item_GetItemEntity(sItem), "cScrPropCurseMedallion", "_Global_IsBeingPutAway");
	return cScript_GetGlobalReturnBool();
}

//-------------------------------------------------------

/** 
 * Visual effect multiplier for the amulet effects. Good practice to reset this in OnLeave() in the map script.
 * @param afX, the effect multiplier. 1 = default
 */
void Amulet_SetEffectMul(float afX)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sItem = pHandler.GetFirstOfTypeInInventory("CurseMedallion");
	
	if (sItem == "")
	{
		Error("No amulet was found in player inventory!");
		return;
	}
	
	cScript_SetGlobalArgFloat(0, afX);
	cScript_RunGlobalFunc(Item_GetItemEntity(sItem), "cScrPropCurseMedallion", "_Global_SetEffectMul");
}

//-------------------------------------------------------

/** 
 * Special behaviour for the amulet if the player is in a dream sequence
 * @param abX, true/false
 */
void Amulet_SetInDreamSequence(bool abX)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sItem = pHandler.GetFirstOfTypeInInventory("CurseMedallion");
	
	if (sItem == "")
	{
		Error("No amulet was found in player inventory!");
		return;
	}
	
	cScript_SetGlobalArgBool(0, abX);
	cScript_RunGlobalFunc(Item_GetItemEntity(sItem), "cScrPropCurseMedallion", "_Global_SetInDreamSequence");
}

//-------------------------------------------------------

void Amulet_SetTutorialActive(bool abX)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sItem = pHandler.GetFirstOfTypeInInventory("CurseMedallion");
	
	if (sItem == "")
	{
		Error("No amulet was found in player inventory!");
		return;
	}
	
	cScript_SetGlobalArgBool(0, abX);
	cScript_RunGlobalFunc(Item_GetItemEntity(sItem), "cScrPropCurseMedallion", "_Global_SetTutorialActive");
}

//-------------------------------------------------------

//-------------------------------------------------------
// Lantern
//-------------------------------------------------------

//-------------------------------------------------------

/** 
 * Sets the brightness multiplier, should only be used temporarily, want consistent light behavior otherwise.
 * @param afBrightnessMul The value the brightness of the ligth will be multiplied by.
 */
void Lantern_SetBrightnessMul(float afBrightnessMul, bool abInstant = false)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sLanternItem = pHandler.GetFirstOfTypeInInventory("Lantern");
	if (sLanternItem == "")
	{
		Error("No lantern was found in player inventory!");
		return;
	}
	
	iScrItem@ pItem = pHandler.GetByID(sLanternItem);
//	pItem.SetUseAltInventoryIcon(true);
	
	tString sLanternEntity = Item_GetHeld(pItem.GetType().GetEquipHand()) == sLanternItem ? Item_GetHeldEntity(pItem.GetType().GetEquipHand()) : pItem.GetInternalEntity();		
	cScript_SetGlobalArgFloat(0, afBrightnessMul);
	cScript_SetGlobalArgBool(1, abInstant);
	cScript_RunGlobalFunc(sLanternEntity, "cScrPropLantern", "_Global_SetBrightnessMul");
}

//-------------------------------------------------------

void Lantern_SetLightColor(cColor aColor)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sLanternItem = pHandler.GetFirstOfTypeInInventory("Lantern");
	if (sLanternItem == "")
	{
		Error("No lantern was found in player inventory!");
		return;
	}
	
	iScrItem@ pItem = pHandler.GetByID(sLanternItem);
	
	tString sLanternEntity = Item_GetHeld(pItem.GetType().GetEquipHand()) == sLanternItem ? Item_GetHeldEntity(pItem.GetType().GetEquipHand()) : pItem.GetInternalEntity();
	cScript_SetGlobalArgColor(0, aColor);
	cScript_RunGlobalFunc(sLanternEntity, "cScrPropLantern", "_Global_SetLightColor");
}

//-------------------------------------------------------

void Lantern_SetActiveBillboard(int alIdx, float afBrightness)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sLanternItem = pHandler.GetFirstOfTypeInInventory("Lantern");
	if (sLanternItem == "")
	{
		Error("No lantern was found in player inventory!");
		return;
	}
	
	iScrItem@ pItem = pHandler.GetByID(sLanternItem);
	tString sLanternEntity = Item_GetHeld(pItem.GetType().GetEquipHand()) == sLanternItem ? Item_GetHeldEntity(pItem.GetType().GetEquipHand()) : pItem.GetInternalEntity();
	cScript_SetGlobalArgInt(0, alIdx);
	cScript_SetGlobalArgFloat(1, afBrightness);
	cScript_RunGlobalFunc(sLanternEntity, "cScrPropLantern", "_Global_SetActiveBillboard");
}

//-------------------------------------------------

/**
 * Gets the state of the specified move object.
 * 
 * @param asEntity, name of the move object prop.
 **/
void Lantern_ForceFlicker(float afTime, bool abWeak=false, bool abQuick=false)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sLanternItem = pHandler.GetFirstOfTypeInInventory("Lantern");
	if (sLanternItem == "")
	{
		Error("No lantern was found in player inventory!");
		return;
	}	
	iScrItem@ pItem = pHandler.GetByID(sLanternItem);
	
	tString sLanternEntity = Item_GetHeld(pItem.GetType().GetEquipHand()) == sLanternItem ? Item_GetHeldEntity(pItem.GetType().GetEquipHand()) : pItem.GetInternalEntity();		
	cScript_SetGlobalArgFloat(0, afTime);
	cScript_SetGlobalArgBool(1, abWeak);
	cScript_SetGlobalArgBool(2, abQuick);
	cScript_RunGlobalFunc(sLanternEntity, "cScrPropLantern", "_Global_ForceFlicker");
}

//-------------------------------------------------

/**
 * Sets fullness of the lantern.
 * 
 * @param afFullness, how full the lantern should be (0-10).
 **/
void Lantern_SetAmount(int alAmount)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sLanternItem = pHandler.GetFirstOfTypeInInventory("Lantern");
	if (sLanternItem == "")
	{
		Error("No lantern was found in player inventory!");
		return;
	}	
	iScrItem@ pItem = pHandler.GetByID(sLanternItem);
	
	tString sLanternEntity = Item_GetHeld(pItem.GetType().GetEquipHand()) == sLanternItem ? Item_GetHeldEntity(pItem.GetType().GetEquipHand()) : pItem.GetInternalEntity();

	Item_SetContent(ItemType_GetFirstInInventory("Lantern"), "Oil", alAmount);
	cScript_RunGlobalFunc(sLanternEntity, "cScrPropLantern", "_Global_ResetBurnTime");
	
	bool bSkipFlicker = true;
	
	cScript_SetGlobalArgInt(0, alAmount);
	cScript_SetGlobalArgBool(1, bSkipFlicker);
	cScript_RunGlobalFunc(sLanternEntity, "cScrPropLantern", "_Global_FullnessEvent");
}

//-------------------------------------------------------

int Lantern_GetAmount()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	tString sLanternItem = pHandler.GetFirstOfTypeInInventory("Lantern");
	if (sLanternItem == "")
	{
		Error("No lantern was found in player inventory!");
		return -1;
	}	
	
	return Item_GetAmount(sLanternItem);
}

//-------------------------------------------------------
/**
 * Start (or modify) the dark world whisper sound.
 * @param alFogLevel = How heavy the fog is, from 1-3
 */
void DarkWorldWhispers_Play(const int alFogLevel=1)
{
	if (!Sound_Exists("DarkWorldWhispers"))
	{
		Sound_CreateAtEntity("DarkWorldWhispers","level_entity_shared/fog/whispers","player",1.0f);
	}
	if (!Sound_Exists("DarkWorldFog"))
	{
		Sound_CreateAtEntity("DarkWorldFog","level_entity_shared/fog/fog","player",1.0f);
	}
	Sound_SetParam("DarkWorldWhispers","fog_level", alFogLevel);
	Sound_SetParam("DarkWorldFog","fog_level", alFogLevel);
}

//-------------------------------------------------

/* Stop the dark world whisper sound.
 */
void DarkWorldWhispers_Stop(const float afFadeTime=4.0f)
{
	if (Sound_Exists("DarkWorldWhispers")) Sound_Stop("DarkWorldWhispers", afFadeTime);
	if (Sound_Exists("DarkWorldFog")) Sound_Stop("DarkWorldFog", afFadeTime);
}

//-------------------------------------------------

//-------------------------------------------------------
// Shadow flesh injector
//-------------------------------------------------------

void ShadowFleshInjector_ReduceAmount(int alAmount = 1)
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	for (uint i=0;i<pHandler.GetItemCount();++i)
	{
		iScrItem@ pItem = pHandler.GetItem(i);
		if (pItem.GetType().GetID() != "ShadowFleshCanister") continue;
		int lNewAmount = cMath_Max(0, pItem.GetAmount() - alAmount);
		pItem.SetAmount(lNewAmount);
		pItem.SetUseAltInventoryIcon(lNewAmount > 0, false);
		return;
	}
}

//-------------------------------------------------------

int ShadowFleshInjector_GetAmount()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	for (uint i=0;i<pHandler.GetItemCount();++i)
	{
		iScrItem@ pItem = pHandler.GetItem(i);
		if (pItem.GetType().GetID() != "ShadowFleshCanister") continue;
		return pItem.GetAmount();
	}
	return 0;
}

//-------------------------------------------------------

int ShadowFleshInjector_GetPreviousAmount()
{
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	for (uint i=0;i<pHandler.GetItemCount();++i)
	{
		iScrItem@ pItem = pHandler.GetItem(i);
		if (pItem.GetType().GetID() != "ShadowFleshCanister") continue;
		return pItem.GetPreviousAmount();
	}
	return 0;
}

//-------------------------------------------------------

int ShadowFleshVials_GetCount()
{
	int lUnits = 0;
	iScrItemHandler_Interface @pHandler = cast<iScrItemHandler_Interface>( cLux_GetUserModuleFromID(eModuleType_Custom_ItemHandler) );
	for (uint i=0;i<pHandler.GetItemCount();++i)
	{
		iScrItem@ pItem = pHandler.GetItem(i);
		if (pItem.GetType().GetID()!="ShadowFleshVial") continue;
		lUnits+=pItem.GetAmount();
	}
	
	return lUnits;
}

//-------------------------------------------------------