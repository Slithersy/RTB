#include "helpers/helper_rotation.hps"

//-------------------------------------------------

/////////////////////////////////////////
// MAZE CREATION
/////////////////////////////////////////

//-------------------------------------------------

array<bool> mvVisitedChunks;
void CheckFilledArray()
{
    if (mvVisitedChunks.length()<65) {
        while (mvVisitedChunks.length()<65) {
            mvVisitedChunks.insertLast(false);
        }
    }
}

/**
 * Resets the chunk array (all visited go false)
 * 
 **/
void Chunk_ResetArray()
{
    CheckFilledArray();
    for (int i=0;i<65;i++) {
        mvVisitedChunks[i] = false;
    }
}

/**
 * Set if a chunk should be visited
 * 
 * @param alChunkNum, number of the chunk.
 * @param abVisited, whether it was visited.
 **/
void Chunk_SetBeenVisited(int alChunkNum, bool abVisited)
{
    CheckFilledArray();
    mvVisitedChunks[cMath_Clamp(alChunkNum, 1, 64)] = abVisited;
}

/**
 * Check if a chunk has been visited (already used)
 * 
 * @param alChunkNum, number of the chunk.
 **/
bool Chunk_HasBeenVisited(int alChunkNum)
{
    CheckFilledArray();
    return mvVisitedChunks[cMath_Clamp(alChunkNum, 1, 64)];
}

/**
 * Set starting chunk
 * 
 * @param alChunkNum, number of the chunk.
 **/
int mlStartingChunk = 1;
void Chunk_SetStartingCell(int alChunkNum)
{
    mlStartingChunk = alChunkNum;
}

/**
 * Set starting chunk
 * 
 * @param alChunkNum, number of the chunk.
 **/
int Chunk_GetStartingCell()
{
    return mlStartingChunk;
}

/**
 * Pick a random neighbouring chunk that hasn't been visited
 * Returns -1 if there are no close neighbouring chunks
 * 
 * @param alChunkNum, number of the chunk.
 **/
int Chunk_PickNeighbouringCell(int alChunkNum)
{
    CheckFilledArray();
    
    // Assign "levels" to each "floor"
    float fOriginal = (float(alChunkNum)/8);
    int lLevel = cMath_CeilToInt(fOriginal);
    array<int> vNotVisitedCloseChunks;
    //It thinks I'm doing an int and messes up everything... So I'm doing this
    float fRightside = ((float(alChunkNum)+1)/8);
    float fLeftside = ((float(alChunkNum)-1)/8);
    
    // Only include close chunks that exist and haven't been visited in the array
    if ((cMath_CeilToInt(fRightside)==lLevel) && (!Chunk_HasBeenVisited(alChunkNum+1))) { //Right side
        vNotVisitedCloseChunks.insertLast(alChunkNum+1); 
        cLux_AddDebugMessage("Right - "+(alChunkNum+1));
    }
    if ((cMath_CeilToInt(fLeftside)==lLevel) && (!Chunk_HasBeenVisited(alChunkNum-1))) { //Left side
        vNotVisitedCloseChunks.insertLast(alChunkNum-1); 
        cLux_AddDebugMessage("Left - "+(alChunkNum-1));
    }
    if ((0<alChunkNum) && (alChunkNum<57) && (!Chunk_HasBeenVisited(alChunkNum+8))) { //Up
        vNotVisitedCloseChunks.insertLast(alChunkNum+8); 
        cLux_AddDebugMessage("Up - "+(alChunkNum+8));
    }
    if ((8<alChunkNum) && (alChunkNum<65) && (!Chunk_HasBeenVisited(alChunkNum-8))) { //Down
        vNotVisitedCloseChunks.insertLast(alChunkNum-8); 
        cLux_AddDebugMessage("Down - "+(alChunkNum-8));
    }
    
    // Pick a random chunk
    if (vNotVisitedCloseChunks.length()>0) {
        int RandomKey = cMath_RandRectl(0, vNotVisitedCloseChunks.length()-1);
        return vNotVisitedCloseChunks[RandomKey];
    } else return -1;
}

/**
 * Remove/Add wall between cells
 * Returns: Wall that got changed
 * 
 * @param alChunkNum, number of the first chunk.
 * @param alChunkNum2, number of the second chunk.
 * @param abActive, whether to set the wall active or not.
 * @param abShouldChange, default true, only set false if you only want the name of the wall.
 **/
tString Chunk_SetWallBetweenCells(int alChunkNum1=0, int alChunkNum2=0, bool abActive=false, bool abShouldChange=true)
{
    // Check which number is bigger to remove/add it the right way all the time (small_big)
    int lBigNumber = cMath_Max(alChunkNum1, alChunkNum2);
    int lSmallNumber = cMath_Min(alChunkNum1, alChunkNum2);
    if (alChunkNum1==alChunkNum2) {
        Error("Couldn't set walls between cells because numbers are equal in function call");
        return "";
    }
    
    
    // Complicated headache inducing stuff, but it works. I think..
    if ((((lSmallNumber%8) == 0) || (lSmallNumber == 0)) && ((lBigNumber-8) != lSmallNumber)) { //Right/Left corner walls
        if (alChunkNum2 == lSmallNumber) {
            if (abShouldChange)
                Entity_SetActive("wall4_chunk_"+lBigNumber, abActive);
            return ("wall4_chunk_"+lBigNumber);
        } else {
            if (abShouldChange)
                Entity_SetActive("wall"+2+"_chunk_"+lSmallNumber, abActive);
            return ("wall"+2+"_chunk_"+lSmallNumber);
        }
    } else if ((lBigNumber>64) || (lSmallNumber<=0)) { //Top/Bottom corner walls
        if (lSmallNumber>0) {
            if (abShouldChange)
                Entity_SetActive("wall"+3+"_chunk_"+lSmallNumber, abActive);
            return ("wall"+3+"_chunk_"+lSmallNumber);
        } else {
            if (abShouldChange)
                Entity_SetActive("wall"+1+"_chunk_"+lBigNumber, abActive);
            return ("wall"+1+"_chunk_"+lBigNumber);
        }
    } else if (((lBigNumber-lSmallNumber) == 1) && (lSmallNumber>0)) { //Right/Left walls
        if (abShouldChange)
            Entity_SetActive("wall"+2+"_chunk_"+lSmallNumber+"_"+lBigNumber, abActive);
        return ("wall"+2+"_chunk_"+lSmallNumber+"_"+lBigNumber);
    } else if (((lBigNumber-8) == lSmallNumber) && (lSmallNumber>0)) { //Top/Bottom walls
        if (abShouldChange)
            Entity_SetActive("wall"+3+"_chunk_"+lSmallNumber+"_"+lBigNumber, abActive);
        return ("wall"+3+"_chunk_"+lSmallNumber+"_"+lBigNumber);
    }
    
    return "";
}

/**
 * Randomize an int array (Fisher-Yates Shuffle).
 * Returns: Randomized values array.
 * 
 * @param avArray, an array to randomize.
 * @param afPercentage, How much to randomize from 0.1f-0.99f.
 **/
array<int> RandomizeArray(array<int> avArray, float afPercentage=0.99f) {
    array<int> vArrayCopy = avArray;
    if (afPercentage<0.1f)
        return vArrayCopy;

    for (int i = vArrayCopy.length - 1; i > 0; i--) {
        int lIndex = cMath_FloorToInt(float(cMath_RandRectf(0,afPercentage) * (i + 1)));
        int temp = vArrayCopy[i];
        vArrayCopy[i] = vArrayCopy[lIndex];
        vArrayCopy[lIndex] = temp;
    }
    
    return vArrayCopy;
}

/**
 * Get level of line the chunk is in
 * Returns: int level
 * 
 * @param alChunk, the chunk number.
 **/
int Chunk_GetLevel(int alChunk) {
    return cMath_CeilToInt(alChunk/8.0f);
}

//-------------------------------------------------

/////////////////////////////////////////
// BUILDING CREATION
/////////////////////////////////////////

//-------------------------------------------------
array<bool> mvUsedChunks;

void Building_CheckFilledArray()
{
    if (mvUsedChunks.length()<65) {
        while (mvUsedChunks.length()<65) {
            mvUsedChunks.insertLast(false);
        }
    }
}

/**
 * Resets the building array (all spots become accessible)
 * 
 **/
void Building_ResetArray()
{
    Building_CheckFilledArray();
    for (int i=0;i<65;i++) {
        mvUsedChunks[i] = false;
    }
}

/**
 * Set if a chunk contains a building
 * 
 * @param alChunkNum, number of the chunk.
 * @param abBuilding, whether it has a building.
 **/
void Chunk_SetContainsBuilding(int alChunkNum, bool abBuilding)
{
    Building_CheckFilledArray();
    mvUsedChunks[cMath_Clamp(alChunkNum, 1, 64)] = abBuilding;
}

/**
 * Check if a chunk contains a building
 * Returns: Bool whether chunk has been visited
 * 
 * @param alChunkNum, number of the chunk.
 **/
bool Chunk_HasBuilding(int alChunkNum)
{
    Building_CheckFilledArray();
    return mvUsedChunks[cMath_Clamp(alChunkNum, 1, 64)];
}

/**
 * Finds a random unoccupied chunk for a building to reside in with a distance, only in corners or dead ends
 * Returns int chunk free, -1 if no chunk is found (all available chunks are occupied)
 * 
 * @param afDeadEndChance, from 0.0f-1.0f how likely is it to use a dead end chunk.
 * @param afPlaceHallways, from 0.0f-1.0f how likely is it to use a hallway chunk (Don't use for normal buildings, only for asset buildings).
 **/
int Building_FindRandomChunk(float afDeadEndChance=0.3f, float afPlaceHallways=0.0f)
{
    Building_CheckFilledArray();
    
    int alChunkNum = -1;
    int lBlockNum = 2; // Number of chunks that will be blocked from our search
    array<bool> BlockedChunks;
    while (BlockedChunks.length()<65) {
        BlockedChunks.insertLast(false);
    }
    array<int> AvailableChunks;
    array<int> CornerChunks;
    array<int> DeadEndChunks;
    array<int> HallWayChunks;
    
    float fChanceChecker = cMath_RandRectl(1, 99);
    fChanceChecker = fChanceChecker/100.0f;
    float fChanceChecker2 = cMath_RandRectl(1, 99);
    fChanceChecker2 = fChanceChecker2/100.0f;
    while ((alChunkNum == -1) && (lBlockNum>=0)) {
        // Find all unavailable chunks
        for (int Chunk=1;Chunk<65;Chunk++) {
            if ((Chunk == mlStartingChunk) || (Chunk_HasBuilding(Chunk))) {
                int lLeft = 0;
                int lRight = 0;
                int lUp = 0;
                int lDown = 0;
                for (int i=1;i<=lBlockNum;i++) {
                    //Check left
                    if (Chunk_GetLevel(Chunk-i) == Chunk_GetLevel(Chunk))
                        lLeft++;
                    //Check right
                    if (Chunk_GetLevel(Chunk+i) == Chunk_GetLevel(Chunk))
                        lRight++;
                    //Check up
                    if ((Chunk+(8*i)) <= 64)
                        lUp++;
                    //Check down
                    if ((Chunk-(8*i)) >= 1)
                        lDown++;
                }
                
                for (int i=(Chunk-lLeft);i<=(Chunk+lRight);i++) {
                    BlockedChunks[i] = true; //Insert current line into blocked
                    cLux_AddDebugMessage("Because of chunk: "+Chunk+" Blocked: "+i);
                    if (lUp>0) { //Insert all top lines
                        for (int k=1;k<=lUp;k++) {
                            BlockedChunks[i+(8*k)] = true;
                            cLux_AddDebugMessage("Because of chunk: "+Chunk+" Blocked: "+(i+(8*k)));
                        }
                    }
                    if (lDown>0) { //Insert all bottom lines
                        for (int k=1;k<=lDown;k++) {
                            BlockedChunks[i-(8*k)] = true;
                            cLux_AddDebugMessage("Because of chunk: "+Chunk+" Blocked: "+(i-(8*k)));
                        }
                    }
                }
            }
        }
        
        // Find all the available chunks and place in AvailableChunks
        for (int Chunk=1;Chunk<65;Chunk++) {
            if (!BlockedChunks[Chunk])
                AvailableChunks.insertLast(Chunk);
        }
        
        if (AvailableChunks.length()==0) {
            cLux_AddDebugMessage("No available chunks, reducing lBlockNum from "+lBlockNum+" to "+(lBlockNum-1));
            for (int i=0;i<BlockedChunks.length();i++) {
                if (BlockedChunks[i])
                    cLux_AddDebugMessage("blockedchunk: "+i);
            }
        }
        
        if (AvailableChunks.length()==0) {
            lBlockNum = lBlockNum - 1; 
            array<int> EmptyArray;
            array<bool> EmptyBoolArray;
            BlockedChunks = EmptyBoolArray;
            while (BlockedChunks.length()<65) {
                BlockedChunks.insertLast(false);
            }
            AvailableChunks = EmptyArray;
            CornerChunks = EmptyArray;
            DeadEndChunks = EmptyArray;
            continue;
        }
        
        // Save all the chunks with a corner
        for (int i=0;i<AvailableChunks.length();i++) {
            int Chunk = AvailableChunks[i];
            int lHorizontalCount = 0;
            int lVerticalCount = 0;
            tString sLeftWall = Chunk_SetWallBetweenCells(Chunk, Chunk-1, false, false);
            tString sRightWall = Chunk_SetWallBetweenCells(Chunk, Chunk+1, false, false);
            tString sUpWall = Chunk_SetWallBetweenCells(Chunk, Chunk+8, false, false);
            tString sDownWall = Chunk_SetWallBetweenCells(Chunk, Chunk-8, false, false);
            //Left/Right
            if (Entity_IsActive(sLeftWall))
                lHorizontalCount++;
            if (Entity_IsActive(sRightWall))
                lHorizontalCount++;
            //Up/Down
            if (Entity_IsActive(sUpWall))
                lVerticalCount++;
            if (Entity_IsActive(sDownWall))
                lVerticalCount++;

            if ((lHorizontalCount==1) && (lVerticalCount==1))
                CornerChunks.insertLast(Chunk);
            if (((lHorizontalCount==2) && (lVerticalCount==1)) || ((lHorizontalCount==1) && (lVerticalCount==2)))
                DeadEndChunks.insertLast(Chunk);
            if  (afPlaceHallways>0.0f && (((lHorizontalCount==2) && (lVerticalCount==0)) || ((lHorizontalCount==0) && (lVerticalCount==2))))
                HallWayChunks.insertLast(Chunk);
        }
        
        if ((afPlaceHallways>0.0f) && (HallWayChunks.size()>0)) {
            // Pick a random hallway chunk with chance
            if ((fChanceChecker2 < afPlaceHallways) || (DeadEndChunks.size()==0 && afDeadEndChance>0.0f)) {
                int lRanIndex = cMath_RandRectl(0, HallWayChunks.length()-1);
                return HallWayChunks[lRanIndex];
            }
        }
        cLux_AddDebugMessage("1. Trying to place in dead end. Size is "+DeadEndChunks.size());
        if (DeadEndChunks.size()>0) {
            // Pick a random dead end chunk with chance
            if (!(fChanceChecker < afDeadEndChance))
                cLux_AddDebugMessage("2. Chance failed");
            if (!(CornerChunks.size()==0 && afDeadEndChance>0.0f))
                cLux_AddDebugMessage("2. No corners or dead end chance is less or equal to 0, cahnce "+afDeadEndChance);
            if ((fChanceChecker < afDeadEndChance) || ((CornerChunks.size()==0 || (lBlockNum==0)) && afDeadEndChance>0.0f) || (afPlaceHallways>0.0f)) {
                cLux_AddDebugMessage("2. Picked random dead end chunk");
                int lRanIndex = cMath_RandRectl(0, DeadEndChunks.length()-1);
                return DeadEndChunks[lRanIndex];
            }
        } else if (afPlaceHallways>0.0f) {
            lBlockNum = lBlockNum - 1; 
            array<int> EmptyArray;
            array<bool> EmptyBoolArray;
            BlockedChunks = EmptyBoolArray;
            while (BlockedChunks.length()<65) {
                BlockedChunks.insertLast(false);
            }
            AvailableChunks = EmptyArray;
            CornerChunks = EmptyArray;
            DeadEndChunks = EmptyArray;
            HallWayChunks = EmptyArray;
            continue;
        }
        cLux_AddDebugMessage("3. Cornersize is "+CornerChunks.size());
        cLux_AddDebugMessage("3. Blocknum is "+lBlockNum);
        
        cLux_AddDebugMessage("4. if lBlockNum is not 0 and afPlaceHallways is 0 then reduce blocknum");
        cLux_AddDebugMessage("4. afPlaceHallways is "+afPlaceHallways);
        if ((CornerChunks.size()>0) && (lBlockNum!=0)) {
            cLux_AddDebugMessage("3. Picking random corner chunk");
            // Picking a random corner chunk
            int lRanIndex = cMath_RandRectl(0, CornerChunks.length()-1);
            return CornerChunks[lRanIndex];
        } else if ((afPlaceHallways>0.0f) || ((lBlockNum!=0) && afPlaceHallways<0.01f)) {
            lBlockNum = lBlockNum - 1; 
            array<int> EmptyArray;
            array<bool> EmptyBoolArray;
            BlockedChunks = EmptyBoolArray;
            while (BlockedChunks.length()<65) {
                BlockedChunks.insertLast(false);
            }
            AvailableChunks = EmptyArray;
            CornerChunks = EmptyArray;
            DeadEndChunks = EmptyArray;
            HallWayChunks = EmptyArray;
            continue;
        } else {
            cLux_AddDebugMessage("5. Returned peacefully");
            return -1;
        }
    }
    
    cLux_AddDebugMessage("6. Returned after while??");
    return -1;
}

/**
 * Places building in a chunk (Currently doesn't support holes/objects)
 * Returns int chunk placed in, returns -1 if can't place building
 * 
 * @param asAreaName, area containing the building.
 * @param alChunkNum, number of chunk, places forcefully it. If -1 then it places it randomly in a corner.
 * @param afDeadEndChance, from 0.0f-1.0f how likely is it to use a dead end chunk.
 * @param afPlaceHallways, from 0.0f-1.0f how likely is it to use a hallway chunk (Don't use for normal buildings, only for asset buildings).
 **/
int Building_PlaceInChunk(const tString &in asAreaName, int alChunkNum=-1, float afDeadEndChance=0.3f, float afPlaceHallways=0.0f)
{
    Building_CheckFilledArray();
    
    cLux_AddDebugMessage("Trying to place down "+asAreaName);
    
    // Get Chunk
    if (alChunkNum == -1) {
        //Place in a random corner some distance away from other buildings if possible
        alChunkNum = (Building_FindRandomChunk(afDeadEndChance, afPlaceHallways));
        if (alChunkNum == -1)
            return -1;
    }

    iLuxEntity@ pDoor = cLux_GetCurrentMap().GetEntityByName(asAreaName+"_Wall1_1", eLuxEntityType_LastEnum, "");
    iLuxEntity@ pDoor2 = cLux_GetCurrentMap().GetEntityByName(asAreaName+"_Wall1_5", eLuxEntityType_LastEnum, "");
    if (afPlaceHallways<0.01f) {
        //Make doors static
        if (!(pDoor is null))
        {
            pDoor.GetBody(0).SetMass(0);
            pDoor.GetBody(1).SetMass(0);
            if (!(pDoor.GetBody(2) is null))
                pDoor.GetBody(2).SetMass(0);
        } else Error("Could not find the target entity "+asAreaName+"_Wall1_1");
        
        if (!(pDoor2 is null))
        {
            pDoor2.GetBody(0).SetMass(0);
            pDoor2.GetBody(1).SetMass(0);
            if (!(pDoor2.GetBody(2) is null))
                pDoor2.GetBody(2).SetMass(0);
        } else Error("Could not find the target entity "+asAreaName+"_Wall1_5");
    }
    
    // Get position in 3D space to teleport area to
    iLuxEntity@ pPlayerStart = Map_GetEntity("start_chunk_"+alChunkNum, eLuxEntityType_Area);
    if (pPlayerStart is null)
    {
        Error("Could not find the target entity "+"start_chunk_"+alChunkNum);
        return -1;
    }
    
    iLuxEntity@ pBuilding = Map_GetEntity(asAreaName, eLuxEntityType_Area);
    if (pBuilding is null)
    {
        Error("Could not find the target entity "+asAreaName);
        return -1;
    }
    // Place building in chunk 
    pBuilding.SetPosition(pPlayerStart.GetPosition());
    
    // Check & Save where doors need to be added
    array<bool> vLeftRightUpDown = {false, false, false , false}; // True if to add
    tString sLeftWallName = Chunk_SetWallBetweenCells(alChunkNum, alChunkNum-1, false, false);
    tString sRightWallName = Chunk_SetWallBetweenCells(alChunkNum, alChunkNum+1, false, false);
    tString sUpWallName = Chunk_SetWallBetweenCells(alChunkNum, alChunkNum+8, false, false);
    tString sDownWallName = Chunk_SetWallBetweenCells(alChunkNum, alChunkNum-8, false, false);
    // Left
    if (!Entity_IsActive(sLeftWallName)) {
        vLeftRightUpDown[0] = true;
    }
    // Right
    if (!Entity_IsActive(sRightWallName)) {
        vLeftRightUpDown[1] = true;
    }
    // Up
    if (!Entity_IsActive(sUpWallName)) {
        vLeftRightUpDown[2] = true;
    }
    // Down
    if (!Entity_IsActive(sDownWallName)) {
        vLeftRightUpDown[3] = true;
    }
        
    if (afPlaceHallways<0.01f) {
        // Rotate appropriately
        if (vLeftRightUpDown[3] and vLeftRightUpDown[0]) { //Down - Left
                    //Down - Left we can skip as it's default
                    cLux_AddDebugMessage("Down to Left");
        } else if (vLeftRightUpDown[0] and vLeftRightUpDown[2]) { //Left - Up
            Entity_FaceToEntity(asAreaName, sLeftWallName, false);
            cLux_AddDebugMessage("Left to Up");
        } else if (vLeftRightUpDown[2] and vLeftRightUpDown[1]) { //Up - Right
            Entity_FaceToEntity(asAreaName, sUpWallName, false);
            cLux_AddDebugMessage("Up to Right");
        } else if (vLeftRightUpDown[1] and vLeftRightUpDown[3]) { //Right - Down
            Entity_FaceToEntity(asAreaName, sRightWallName, false);
            cLux_AddDebugMessage("Right to Down");
        // Now we move to dead ends, we'll also replace the left door with a wall while at it
        } else if (vLeftRightUpDown[0]) { //Left
            Entity_SetActive(asAreaName+"_Wall1_5", false);
            Entity_SetActive(asAreaName+"_Wall1_6", false);
            Entity_SetActive(asAreaName+"_Wall1_7", false);
            Entity_SetActive(asAreaName+"_Wall1_8", false);
            Entity_SetActive(asAreaName+"_Wall1_11", true);
            Entity_FaceToEntity(asAreaName, sLeftWallName, false);
            cLux_AddDebugMessage("Left");
        } else if (vLeftRightUpDown[1]) { //Right
            Entity_SetActive(asAreaName+"_Wall1_5", false);
            Entity_SetActive(asAreaName+"_Wall1_6", false);
            Entity_SetActive(asAreaName+"_Wall1_7", false);
            Entity_SetActive(asAreaName+"_Wall1_8", false);
            Entity_SetActive(asAreaName+"_Wall1_11", true);
            Entity_FaceToEntity(asAreaName, sRightWallName, false);
            cLux_AddDebugMessage("Right");
        } else if (vLeftRightUpDown[2]) { //Up
            Entity_SetActive(asAreaName+"_Wall1_5", false);
            Entity_SetActive(asAreaName+"_Wall1_6", false);
            Entity_SetActive(asAreaName+"_Wall1_7", false);
            Entity_SetActive(asAreaName+"_Wall1_8", false);
            Entity_SetActive(asAreaName+"_Wall1_11", true);
            Entity_FaceToEntity(asAreaName, sUpWallName, false);
            cLux_AddDebugMessage("Up");
        } else if (vLeftRightUpDown[3]) { //Down
            Entity_SetActive(asAreaName+"_Wall1_5", false);
            Entity_SetActive(asAreaName+"_Wall1_6", false);
            Entity_SetActive(asAreaName+"_Wall1_7", false);
            Entity_SetActive(asAreaName+"_Wall1_8", false);
            Entity_SetActive(asAreaName+"_Wall1_11", true);
            Entity_FaceToEntity(asAreaName, sDownWallName, false);
            cLux_AddDebugMessage("Down");
        }
        
        // Remove roof
        Entity_SetActive("roof_chunk_"+alChunkNum, false); 
        // Remove all walls
        Chunk_SetWallBetweenCells(alChunkNum, alChunkNum-1, false, true);
        Chunk_SetWallBetweenCells(alChunkNum, alChunkNum+1, false, true);
        Chunk_SetWallBetweenCells(alChunkNum, alChunkNum-8, false, true);
        Chunk_SetWallBetweenCells(alChunkNum, alChunkNum+8, false, true);
        
        //Make doors static
        if (!(pDoor is null))
        {
            pDoor.GetBody(1).SetMass(10);
            if (!(pDoor.GetBody(2) is null))
                pDoor.GetBody(2).SetMass(10);
        } else Error("Could not find the target entity "+asAreaName+"_Wall1_1");
        
        if (!(pDoor2 is null))
        {
            pDoor2.GetBody(1).SetMass(10);
            if (!(pDoor2.GetBody(2) is null))
                pDoor2.GetBody(2).SetMass(10);
        } else Error("Could not find the target entity "+asAreaName+"_Wall1_5");
        
        // Assign chunk as occupied
        Chunk_SetContainsBuilding(alChunkNum, true);

        return alChunkNum;
    } else {
        // Rotate appropriately
        if (vLeftRightUpDown[0] and vLeftRightUpDown[1]) { //Left - Right
            Entity_FaceToEntity(asAreaName, sLeftWallName, false);
            cLux_AddDebugMessage("Left - Right");
        } else if (vLeftRightUpDown[2] and vLeftRightUpDown[3]) { //Up - Down
            Entity_FaceToEntity(asAreaName, sUpWallName, false);
            cLux_AddDebugMessage("Up - Down");
        // Now we move to dead ends, we'll also replace the left door with a wall while at it
        } else if (vLeftRightUpDown[0]) { //Left
            Entity_FaceToEntity(asAreaName, sLeftWallName, false);
            cLux_AddDebugMessage("Left");
        } else if (vLeftRightUpDown[1]) { //Right
            Entity_FaceToEntity(asAreaName, sRightWallName, false);
            cLux_AddDebugMessage("Right");
        } else if (vLeftRightUpDown[2]) { //Up
            Entity_FaceToEntity(asAreaName, sUpWallName, false);
            cLux_AddDebugMessage("Up");
        } else if (vLeftRightUpDown[3]) { //Down
            Entity_FaceToEntity(asAreaName, sDownWallName, false);
            cLux_AddDebugMessage("Down");
        }

        // Assign chunk as occupied
        Chunk_SetContainsBuilding(alChunkNum, true);

        return alChunkNum;
    }
    
    return -1;
}

/**
 * Get cell behind this building, only call after building is placed
 * Returns cell number, returns -1 if cell is on different level or doesn't exist.
 * 
 * @param asAreaName, the area name of the building.
 * @param alCellNumber, the cell number the building is in.
 * @param abShouldOutside, if it should return cells outside bounds, default is false.
 **/
int Building_GetCellBehind(tString asAreaName, int alCellNumber, bool abShouldOutside=false)
{
    cVector3f vAreaRotationRad = Entity_GetRotationEuler(asAreaName);
    cVector3l vlAreaRotation = cMath_RoundToInt(cVector3f(vAreaRotationRad.x*(180/cMath_Pi), vAreaRotationRad.y*(180/cMath_Pi), vAreaRotationRad.z*(180/cMath_Pi)));

    
    int lLeftCell = (alCellNumber-1);
    int lRightCell = (alCellNumber+1);
    int lUpCell = (alCellNumber+8);
    int lDownCell = (alCellNumber-8);
    
    cLux_AddDebugMessage(""+vlAreaRotation);
    
    // Left
    if (cVector3l(0, 90, 0) == vlAreaRotation) {
        if (((Chunk_GetLevel(lLeftCell) == Chunk_GetLevel(alCellNumber)) && (lLeftCell <= 64) && (lLeftCell >= 1)) || abShouldOutside)
            return lLeftCell;
    }
    // Right
    if ((cVector3l(0, 270, 0) == vlAreaRotation) || (cVector3l(0, -90, 0) == vlAreaRotation)) {
        if (((Chunk_GetLevel(lRightCell) == Chunk_GetLevel(alCellNumber)) && (lRightCell <= 64) && (lRightCell >= 1)) || abShouldOutside)
            return lRightCell;
    }
    // Up
    if (cVector3l(0, 0, 0) == vlAreaRotation) {
        if ((((Chunk_GetLevel(lUpCell)-1) == Chunk_GetLevel(alCellNumber)) && (lUpCell <= 64) && (lUpCell >= 1)) || abShouldOutside)
            return lUpCell;
    }
    // Down
    if (cVector3l(180, 0, 180) == vlAreaRotation) {
        if ((((Chunk_GetLevel(lDownCell)+1) == Chunk_GetLevel(alCellNumber)) && (lDownCell <= 64) && (lDownCell >= 1)) || abShouldOutside)
            return lDownCell;
    }
    
    return -1;
}

//-------------------------------------------------

/////////////////////////////////////////
// WATCH FUNCTIONS
/////////////////////////////////////////

//-------------------------------------------------

float mfGlobalTime = 0.0f;
/**
 * Add run time to map
 * 
 * @param afTimeToAdd, the time to add to the global time.
 **/
void Watch_AddRunTime(float afTimeToAdd)
{
    mfGlobalTime = mfGlobalTime + afTimeToAdd;
    cScript_SetGlobalVarFloat("Watch_GlobalTime", mfGlobalTime);
}


/**
 * Get run time of map
 * Returns run time of map in float.
 * 
 **/
float Watch_GetRunTime()
{
    return cScript_GetGlobalVarFloat("Watch_GlobalTime");
}

/**
 * Reset run time of map
 * 
 **/
void Watch_ResetRunTime()
{
    mfGlobalTime = 0.0f;
    cScript_SetGlobalVarFloat("Watch_GlobalTime", 0.0f);
}

//-------------------------------------------------

/////////////////////////////////////////
// CSTRING FUNCTIONS
/////////////////////////////////////////

//-------------------------------------------------

/**
 * Splits string and returns array of strings
 * 
 * @param asString, the string.
 * @param asSeperator, the seperator.
 **/
array<tString> cString_Split(const tString &in asString, const tString &in asSeperator)
{
    array<tString> vSeperated;
    
    tString new_asString = asString;
    while (cString_GetFirstStringPos(new_asString, asSeperator) != -1) {
        int lStartPos = cString_GetFirstStringPos(new_asString, asSeperator);
        vSeperated.insertLast(cString_Sub(new_asString, 0, lStartPos));
        new_asString = cString_Sub(new_asString, lStartPos + asSeperator.length());
        
        if (cString_GetFirstStringPos(new_asString, asSeperator) == -1 ) {
            vSeperated.insertLast(new_asString);
        }
    }
    
    return vSeperated;
}


/**
 * Fully translate a string in a lang file 
 * 
 * @param asCatgory, Category.
 * @param asEntry, Entry.
 **/
tString cString_FullyTranslate(const tString &in asCatgory, const tString &in asEntry)
{
    return cString_To8Char(cLux_Translate(asCatgory, asEntry));
}